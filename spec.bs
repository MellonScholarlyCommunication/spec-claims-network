<pre class='metadata'>
Title: Claims Network
Shortname: claims-network
Level: none
Status: LD
Editor: Patrick Hochstenbach, Ghent University Library, patrick.hochstenbach@ugent.be
Editor: Herbert Van de Sompel, DANS, hvdsomp@gmail.com
Abstract: This document specifies a decentralized claims network.
Markup Shorthands: markdown yes, css no
Canonical URL: _ORCHESTRATOR_CURRENT_BUILD_FULL_LINK_
Previous Version: _ORCHESTRATOR_PREVIOUS_BUILD_FULL_LINK_
</pre>

Introduction {#intro}
=====================

Research assessment is an integral part of academic life and measures the quality of the research output and, by cumulative evaluations, contributes to the assessment of each researcher. There is a global activity to take a broad range of activities and contributions into account in researcher assessments. Examples are the [[COARA]] (Coalition for Advancing Research Assessment) initiative and OpenAIRE [[Graspos]] researcher profile. A recurring question in these initiatives is: "How to capture information beyond traditional research outputs?" Current Research Information Systems (CRIS) seldom capture activities such as interviews, news reports about a researcher or research project, teaching activities, and contributions to open-source development.  

In 2024, SURF (the ICR cooperative of Dutch education and research institutions) and IMEC-IDLab (the Flemish Internet Technology and Data Science Lab) created an experimental, decentralized [=claim network=] that collects and distributes claims about researcher activities and contributions. The claims network is depicted in Figure 1 below.

<img alt="Claims network architecture" with="700" height="700" src="images/architecture.png">

*Figure 1: Overview of the claims network*

The processing flow in the claims network is listed below:

- [1] Alice, a Dutch researcher, wants to claim a new contribution at <tt>URL-F</tt> for her scholarly record. 
- [2] Alice, as an account on a national [=academic social networking service=] which provides researchers a safe communication medium to support informal researcher interactions with a focus on science, popularization of science, and education. In the Figure 1, the national academic social service <tt>social.edu.nl</tt> is implemented using Mastodon. With a 'toot' message including the <tt>URL-F</tt>, Alice claims her contribution. In her toot message she sends a carbon-copy (cc) of this message to a [=claim bot=] at the Mastodon handle <tt>@logbot@bots.surf.nl</tt>.
- [3] Using the Mastodon API, the [=claim bot=] receives push message for every toot address to the bot account <tt>@logbot@bots.surf.nl</tt>. 
- [4] The [=claim bot=] reads the claimed <tt>URL-F</tt> from the incoming toot message and uses one or more [=summarizer services=] in the network to collect descriptive metadata for this URL.
- [5] The [=summarizer service=], on request, generates a metadata summary for <tt>URL-F</tt>.
- [6] When a summary is available, the [=summarizer service=] updates the [=claim bot=] about the metadata summary.
- [7] The [=claim bot=] uses the summary to update a public [=activity log=] with Carol's contributions. This activity log can be used by a national [=claims service=] (e.g. a CRIS system) to update the scholarly record for Alice.

Functional and non-functional requirements {#functional}
========================================================

A claims network should have the following functional requirements:

- **Distributed architecture** : The network should operate across multiple social networking services, claim bots, summarizer and claims services to prevent a reliance on a central authority for each of these services.
- **Broad scope** : The network should allow for the processing of a broad scope of Web resource about which researcher can make claims. The claims are not confined to traditional research outputs but can include various forms of content such as newspaper clips, media appearances,  lectures recordings, and contributions to software development projects, among others.
- **Automated content summarization** :  The network should automate content summarization for researcher claims. Providing a URL of a claimed Web resource to a claim bot should be sufficient to update the claim service with metadata about that claim.
- **Automated updated of claims service pages** :  The network should provide automated updated claims service page that aligns with preferences of a researcher. Researchers can provide in their Mastodon profile the  URL of a personal claims service page that should be updated by the network.
- **Verification of ownership** :  The network should provide the verification of ownership of Mastodon account and claims service pages by supporting backlink verification.
- **Verification of actors** : The network should provide the verification of actors participating in the network. It should be possible to proof an actor is a researcher and part of some (national) research community.
- **Selection and filtering** : The network should provide a selection and filtering mechanism for claims by actors that are part of a particular research community. Research is a global enterprise, a claim bot may only provide services for researchers belonging to a national research community, or withing a discipline from that community.
- **Version history** : The network should provide a version history of all claims that are added to the claims service.

Non-functional requirements of a decentralized claims network includes: **scalability ** handle processing of researcher [=claims=] on a national level, **performance levels** to process and update claims service pages in near-real time, **resilience** against network outages, and adherence to **interoperability affordances** using open standards and protocols.

Terminology {#terminology}
==========================

To discuss the claims network, the following terms are used in this specification:

: <dfn export>Academic social networking service</dfn>
:: A social network platform such as Mastodon that is used in an academic setting that is used by researchers to publish claims about a contribution to the scholarly record of the researcher.

: <dfn export>Activity Log</dfn>
:: A public machine-readable Web resource that contains descriptive metadata about [=claims=] created by a researcher combined with provenance information about the [=claim=] itself.

: <dfn export>Artifact</dfn>
:: An artifact is a Web resource identified by a URL that serves at the main focus of interaction between the participants in the network. Examples of artifacts are traditional scholarly contributions but also interviews, news reports about a researcher or research project, teaching activities, and contributions to open-source development.

: <dfn export>Claim</dfn>
:: An artifact that is a proof of a researcher activity that needs to become part of the scholarly record of a researcher.

: <dfn export>Claim bot</dfn>
:: An automated process that works on behalf of the researcher to collect claims, descriptive metadata about such claims and updates the activity Log of a researcher.

: <dfn export>Claims network</dfn>
:: A decentralized network of evolving claim assertions.

: <dfn export>Claims service</dfn>
:: A service node that collects claims made by a researcher and provides an public accessible overview activities and contributions of a researcher.

: <dfn export>Claim summary</dfn>
:: An RDF source in the JSON-LD format containing a summary of a [=claim=] including provenance information about the [=claim=].

: <dfn export>Data Node</dfn>
:: A data node is a network node that hosts artifacts. Examples of data nodes are news agencies, institutional repositories, blogs, and governmental websites.

: <dfn export>Inbox</dfn>
:: An inbox is a Web location conform with the [Event Notifications in Value-Adding Networks](https://www.eventnotifications.net) specification. Inboxes are setup by [=data nodes=] and [=service nodes=] to receive LDN+AS2 JSON-LD messages that are exchanged in the [=claims network=].

: <dfn export>Notification</dfn>
:: A notification is are JSON-LD messages exchanged in the [=claim network=] using the [Event Notifications in Value-Adding Networks](https://www.eventnotifications.net) specification.

: <dfn export>Service Node</dfn>
:: A service node provides value-added services for artifacts hosted by [=data nodes=]. An example of a service node is a [=summarizer service=] that generates descriptive metadata for a given Web resource.

: <dfn export>Service Result</dfn>
:: A service result is any outcome of providing a value-added service for an [=artifact=]. An example of a service result is a JSON document that contains the descriptive metadata generated by a [=summarizer service=].

: <dfn export>Summarizer Service</dfn>
:: A summarizer service is a service node that, given [=claim=], generates descriptive metadata about the [=claim=].

: <dfn export>Verification Service</dfn>
:: A verification service is a node in the network that provides that verifies the identities of used by researchers in the [=claims network=].

General Process Flow {#general-process-flow}
============================

A [=claims network=] consists of multiple actors exchanging information through a combination of application-specific messages (e.g., Mastodon API messages, if Mastodon serves as the implementation for the [=academic social networking service=]) and application-neutral claims network messages. The application-neutral messaging format follows the [Event Notifications in Value-Adding Networks](https://www.eventnotifications.net/) messaging patterns, which will be explained in the next section.

The processing workflow in a [=claim network=] is depicted in Figure 2 and is explained below.

<img alt="Overview of the network participants"
     width="800"
     src="images/claims_network.svg">
*Figure 2: Message exchanges in a claims network*

Network communication patterns {#network-communication-patterns}
===============================

In a [=claims network=] automated agents, such as the [=claims bot=], operate on behalf of a researcher to update an [=activity log=] and [=claims service=] with descriptive metadata about [=claims=] made by the researcher on a (national) [=academic social networking service=]. The network nodes operate by sending LDN+AS2 between each other that follow the [Event Notifications in Value-Adding Networks](https://www.eventnotifications.net) specification. 

Depending on the type of sender an receiver different types of messages that are specified below. 

## Academic social network service to claim bot ## {#pattern-social-claim-bot}

The **academic social network service to claim bot** pattern is used by the [=academic social networking service=] to forward [=claims=] to a [=claims bot=]. Example 1 provides an example of such a [=claim=] made by the researcher Alice on a Mastodon instance hosted at <tt>https://social.edu.nl</tt>.

<div class="example">
Alice creates a toot message on <tt>social.edu.nl</tt> claiming her contribution <tt>https://parliament.nl/questions/2025-21-121291</tt>.

<pre>
I just submitted my first question to the Dutch parliament! 
https://parliament.nl/questions/2025-21-121291 /cc @logbot@bots.surf.nl 
</pre>

We assume the [=claim bot=] has the Mastodon account <tt>@logbot@bots.surf.nl</tt>.
</div>

We assume that the [=claims network=] includes the capability to transform (toot) messages that are forwarded to the [=claims bot=] into a LDN+AS2 message. An example implementation could involve a process operating on behalf of the [=claim bot=], which monitors the <tt>@logbot@bots.surf.nl</tt> account on <tt>bots.surf.nl</tt> using the Mastodon API and generates LDN+AS2 messages for each incoming toot directed at the [=claim bot=].

### Announce ### {#pattern-social-claim-bot-announce}

An [=academic social networking service=] should trigger a [=claim bot=] by sending an LDN+AS2 message to the [=Inbox=] of the [=claim bot=] with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Announce</tt>.
- The `actor` property should contain:
	- As value of the <tt>id</tt> property the social networking profile URL of the researcher who created the original post.
	- As value of the <tt>name</tt> property, the name of the researcher.
	- As value of the <tt>type</tt> property, the fixed string <tt>Person</tt>.
- The `origin` property should contain information about the LDN+AS2 generator software:
	- As value of the <tt>id</tt> property, a public WebID profile URL.
	- As value of the <tt>name</tt> property, the name of the  generator software.
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `object` property should contain information about the forwarded social networking post:
	- As value of the <tt>id</tt> property, the URL of the social networking post.
	- As value of the <tt>content</tt> property, the post message.
	- The <tt>url</tt> property is a collection of zero or more URL-s that are mentioned in the post message. Each url item has the following properties:
		- As value of the <tt>href</tt> property, the URL that is mentioned in the post message.
		- As value of the <tt>type</tt> property, the fixed string <tt>Link</tt>.
	- As value of the <tt>type</tt> property, the fixed string <tt>Note</tt>.
- The `published` property should contain in ISO 8601 format the datetime of the original post message.

In Example 2, we illustrate the structure of an LDN+AS2 message corresponding to the toot message presented in Example 1.

<div class="example">
A generated LDN+AS2 message for the toot in Example 1.

<pre class=include-code>
path: examples/example2.jsonld
highlight: json
show: 
</pre>
</div>

## Claim bot to summarizer service ## {#pattern-claim-bot-summarizer}

The **claim bot to summarizer service** pattern is used by a [=claim bot=] to request the generation of descriptive metadata for a [=claim=] at one or more [=summarizer services=]. Example 1, contains an example of such a [=claim=]: <tt>https://parliament.nl/questions/2025-21-121291</tt>. A   [=summarizer service=] can have many types of implementations such as [Zotero Translation Server](https://github.com/zotero/translation-server), web archives, [Crossref](https://crossref.org) clients, web crawlers, AI-driven text analyzers to name a few. What all implementation have in common is that they employ the LDN+AS2 messages using the Event Notifications protocol to communicate asynchronously with the [=claims bot=]. Asynchronous messaging enables the [=summarizer service=] to scale efficiently by executing data extraction algorithms through batch jobs, as opposed to real-time processing.

### Offer ### {#pattern-claim-bot-summarizer-offer}

To request a summary for a [=claim=] an LDN2+AS2 message should be send to the [=Inbox=] of a [=summarizer service=] with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Offer</tt>.
- The `actor` property should contain information about the LDN+AS2 generator software:
	- As value of the <tt>id</tt> property, a public WebID profile URL.
	- As value of the <tt>name</tt> property, the name of the  generator software.
	- As value of the <tt>inbox</tt> property, the [=Inbox=] of the [=claim bot=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `object` property should contain information about the [=claim=]:
	- As value of the <tt>id</tt> property, the URL of the [=claim=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Document</tt>.
- The `published` property should contain in ISO 8601 format the datetime of the original post message.

In Example 3, we illustrate the structure of an LDN+AS2 message that the [=claim bot=] sends to the [=summarizer service=] pertaining to the [=claim=] of Example 1.

<div class="example">
A generated LDN+AS2 message for the [=claim=] <tt>https://parlaiment.nl/questions/2025-21-121291</tt> in Example 1.

<pre class=include-code>
path: examples/example3.jsonld
highlight: json
show: 
</pre>
</div>

## Summarizer to claim bot service## {#pattern-summarizer-claim-bot}

The [=summarizer service=] has the four possible responses to respond to an LDN+AS2 message received in the [=Inbox=] of the service:

- [1] Ignore the LDN+AS2 message if it is not well-formatted.
- [2] Tentatively accept the LDN+AS2 message as a new request for metadata extraction. Optionally the [=summarizer service=] can send an <tt>Accept</tt> LDN+AS2 message to the [=Inbox=] of the [=claim bot=] as confirmation.
- [3] Reject the LDN+AS2 message for one of two reasons. In both of these cases the [=summarizer service=] should send a <tt>Reject</tt> LDN+AS2 message to the [=Inbox=] of the [=claim bot=]:
	- [a] No attempt was made to summarize the [=claim=] due to technical, privacy or security reasons.
	- [b] An attempt was made to summarize the [=claim=], but it lead a processing failure.
- [4] If summarization of [=claim=] has a (possible empty) result, then an <tt>Announce</tt> LDN+AS2 message should be send to the [=Inbox=] of the [=claim bot=].

For each of the four scenarios we will present below the requirements for the LDN+AS2 messages.

### Accept

To (tentatively) accept an offer for the summarization of a [=claim=], the [=summarizer service=] can optionally send an <tt>Accept</tt> LDN+AS2 message to the [=Inbox=] of the [=claim bot=] with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Accept</tt>.
- The `actor` property should contain information about the [=summarizer service=]:
	- As value of the <tt>id</tt> property, a public WebID profile URL.
	- As value of the <tt>name</tt> property, the name of the  generator software.
	- As value of the <tt>inbox</tt> property, the [=Inbox=] of the [=summarizer service=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `context` property should contain the URL of the [=claim=].
- The `inReplyTo` property should contain the identifier of the <tt>Offer</tt> that was sent by the [=claim bot=] to the [=summarizer service=]. 
- The `object` property should contain in-line the complete content of the <tt>Offer</tt> that was sent by the [=claim bot=] to the [=summarizer service=].
- The `published` property should contain in ISO 8601 format the datetime of the original post message.

In Example 4, we illustrate the structure of an LDN+AS2 message that the [=summarizer service=] can send to the [=claim bot=] in to tentatively accept the <tt>Offer</tt> send in Example 3.

<div class="example">

An <tt>Accept</tt> LDN+AS2 message send by the [=summarizer service=] to the [=claim bot=] in response to the <tt>Offer</tt> send in Example 3.

<pre class=include-code>
path: examples/example4.jsonld
highlight: json
show: 
</pre>
</div>

### Reject

To reject an offer for the summarization of a [=claim=], the [=summarizer service=] should send a <tt>Reject</tt> LDN+AS2 message to the [=Inbox=] of the [=claim bot=] with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Reject</tt>.
- The `actor` property should contain information about the [=summarizer service=]:
	- As value of the <tt>id</tt> property, a public WebID profile URL.
	- As value of the <tt>name</tt> property, the name of the  generator software.
	- As value of the <tt>inbox</tt> property, the [=Inbox=] of the [=summarizer service=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `context` property should contain the URL of the [=claim=].
- The `inReplyTo` property should contain the identifier of the <tt>Offer</tt> that was sent by the [=claim bot=] to the [=summarizer service=]. 
- The `object` property should contain in-line the complete content of the <tt>Offer</tt> that was sent by the [=claim bot=] to the [=summarizer service=].
- The `published` property should contain in ISO 8601 format the datetime of the original post message.
- A `summary` property may be available that contains free text explaining the reason for rejecting the <tt>Offer</tt>.

In Example 5, we illustrate the structure of an LDN+AS2 message that the [=summarizer service=] can send to the [=claim bot=] in reject the <tt>Offer</tt> send in Example 3.

<div class="example">

A <tt>Reject</tt> LDN+AS2 message send by the [=summarizer service=] to the [=claim bot=] in response to the <tt>Offer</tt> send in Example 3.

<pre class=include-code>
path: examples/example5.jsonld
highlight: json
show: 
</pre>
</div>

### Announce

To announce the result for the summarization of a [=claim=], the [=summarizer service=] should send an <tt>Announce</tt> LDN+AS2 message to the [=Inbox=] of the [=claim bot=] with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Announce</tt>.
- The `actor` property should contain information about the [=summarizer service=]:
	- As value of the <tt>id</tt> property, a public WebID profile URL.
	- As value of the <tt>name</tt> property, the name of the  generator software.
	- As value of the <tt>inbox</tt> property, the [=Inbox=] of the [=summarizer service=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `context` property should contain the URL of the [=claim=].
- The `inReplyTo` property should contain the identifier of the <tt>Offer</tt> that was sent by the [=claim bot=] to the [=summarizer service=]. 
- The `object` property should contain information where to find the [=Service Result=] document that contains the extracted metadata for a [=claim=]:
	- As value of the <tt>id</tt> property, a public URL to a summarization document should be provide.
	- As value of the <tt>type</tt> property, the fixed string <tt>Document</tt>.
- The `published` property should contain in ISO 8601 format the datetime of the original post message.

In Example 6, we illustrate the structure of an LDN+AS2 message that the [=summarizer service=] can send to the [=claim bot=] to announce the summary for the [=claim=] of Example 3.

<div class="example">

An <tt>Announce</tt> LDN+AS2 message send by the [=summarizer service=] to the [=claim bot=] in response to the <tt>Offer</tt> send in Example 3.

<pre class=include-code>
path: examples/example6.jsonld
highlight: json
show: 
</pre>
</div>

[=Service Result=] summarization results can be serialized using many formats. Within a [=claims network=] it is essential for network partners to reach a common agreement on the expected output format. Examples of potential formats include, but are not limited to, [CSL JSON](https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html), [schema.org](https://schema.org) and [Bibo](https://www.dublincore.org/specifications/bibo/bibo/bibo.rdf.xml).

Example 7 provides an example schema.org summarization service result <tt>https://mycontributions.info/service/x/result/12712-128219.jsonld</tt> of Example 6.

<div class="example">
A schema.org summarization service result for Example 6 made available as the Web resource <tt>https://mycontributions.info/service/x/result/12712-128219.jsonld</tt>.

<pre class=include-code>
path: examples/example7.jsonld
highlight: json
show: 
</pre>
</div>

## Claim bot to the activity log service ## {#pattern-activity-log}

The **claim bot to the activity log service** pattern is used by a [=claim bot=] to update an [=activity log=] about a summary that was made for a [=claim=]. Example 1, contains an example of such a claim: https://parliament.nl/questions/2025-21-121291 . Example 7, provides an example of a summary that was generated for that [=claim=]. To publish the summary in an application-neutral format while including its provenance, we propose a [=Claim Summary=] RDF source, of which we will provide an example in the following subsection, an explained in section 6. This [=claim summary=] will be offered to an [=activity log=] using an LDN+AS2 event notification.

### Claim Summary### {#claim-summary-format}

A [=claim summary=] is a JSON-LD serialization of a [=claim summary=] including provenance information about the source of this claim. The <tt>about</tt> section of the [=claim summary=] contains the RDF version of the claim using the [Schema.org](https://schema.org) vocabulary. The <tt>creator</tt> and <tt>isBasedOn</tt> sections provides information the account on the [=academic social networking service=] that made the claim. The <tt>mainEntity</tt> provides the URL of the [=claim=]. And, the <tt>sdPublisher</tt> and <tt>sdDatePublished</tt> provides information about the [=claim bot=] service that was responsible for collecting metadata about the claim.

The [=claim summary=] should be published by the [=claim bot=] as a publicly available Web resource. Example 8 provides an example of such a [=claim summary=] based on the [=claim=] of Example 1 and the generated summary of Example 7. We assume this [=claim summary=] is available at <tt>https://mycontributions.info/service/m/summary/237123-21318.jsonld</tt>.

<div class="example">

An example of a [=claim summary=] created for the [=claim=] of Example 1 and the generated metadata summary of Example 7. This [=claim summary=] will be published by the [=claim bot=] at URL <tt>https://mycontributions.info/service/m/summary/237123-21318.jsonld</tt>.

<pre class=include-code>
path: examples/claim-summary.jsonld
highlight: json
show: 
</pre>
</div>

### Announce

To announce a new [=claim summary=], the [=claim bot=] sends an <tt>Announce</tt> LDN+AS2 message to the LDN Inbox of the [=activity log=] service with the following properties:

- The `id` property should contain a new minted identifier for every toot message.
- The `type` property is the fixed string <tt>Announce</tt>.
- The `actor` property should contain information about the [=claim bot=]:
	- As value of the <tt>id</tt> property, a public WebID profile URL of the [=claim bot=].
	- As value of the <tt>name</tt> property, the name of the [=claim bot=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `origin` property should contain information about [=claim bot=] software:
	- As value of the <tt>id</tt> property, a public WebID profile URL of the [=claim bot=] software.
	- As value of the <tt>name</tt> property, the name of the [=claim bot=] software.
	- As value of the <tt>type</tt> property, the fixed string <tt>Service</tt>.
- The `object` property should contain information [=claim summary=]:
	- As value of the <tt>id</tt> property, the URL of the [=claim summary=].
	- As value of the <tt>type</tt> property, the fixed string <tt>Document</tt>.
- The `published` property should contain in ISO 8601 format the datetime of the original post message.

Example 9 provides an example of an <tt>Announce</tt>  LDN+AS2 message sent by the [=claim bot=] using [=claim summary=] of Example 8 published at <tt>https://mycontributions.info/service/m/summary/237123-21318.jsonld</tt>.

<div class="example">
An <tt>announce</tt> LDN+AS2 message send by the [=claim bot=] to the [=activity log=] service to request the addition of the [=claim summary=] of Example 8 at <tt>https://mycontributions.info/service/m/summary/237123-21318.jsonld</tt> to the log.

<pre class=include-code>
path: examples/example9.jsonld
highlight: json
show: 
</pre>
</div>

Claim Summary {#claim-summary}
==============================

TDB

Trust {#trust}
==============

TDB

Process Flow with Trust {#trust-process-flow}
============================

TDB

<pre class=biblio>
{
	"COARA": {
		"href": "https://coara.eu",
		"title": "Coalition for Advancing Research Assessment (CoARA)"
	},
	"Graspos": {
		"href": "https://www.openaire.eu/graspos-moving-forward-to-a-more-responsible-research-assessment",
		"title": "GraspOS: moving forward to a more responsible research assessment"
	}
}
</pre>